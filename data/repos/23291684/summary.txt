Canada is an Elixir library that provides a declarative authorization framework for web applications, leveraging Elixir's pattern matching capabilities to define permission rules. Targeted at Elixir/Phoenix web developers, it implements a protocol-based approach where permissions are defined by implementing the `Canada.Can` protocol for user/subject structs, allowing developers to specify which actions (create, read, update, destroy) users can perform on resources through pattern-matched function clauses. The library serves as a lightweight alternative to Ruby's CanCan gem, focusing specifically on authorization logic without dependencies on specific web frameworks or ORMs like Ecto, making it suitable for any Elixir application requiring role-based access control and resource-level permissions through a simple `can?` macro interface.