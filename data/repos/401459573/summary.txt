Coalton is a statically typed functional programming language compiler that integrates directly with Common Lisp environments, targeting functional programming developers who need type safety while maintaining LISP's interactive development capabilities. Built entirely in Common Lisp, it provides Hindley-Milner type inference, algebraic data types, pattern matching, and compile-time type checking while preserving full interoperability with existing Common Lisp codebases. The system translates Coalton syntax into native Common Lisp code, enabling developers to write type-safe functional code that can seamlessly call and be called by dynamic Lisp functions. Currently used in production quantum computing software development, Coalton addresses the need for statically typed functional programming within the Common Lisp ecosystem, providing modern language features like parametric polymorphism and sum types while maintaining LISP's REPL-driven development workflow and runtime introspection capabilities.