LambdaLisp is a complete Lisp interpreter implemented as a pure untyped lambda calculus term, targeting computer science researchers and programming language theorists interested in foundational computation theory. The interpreter runs a substantial subset of Common Lisp including closures, reader macros, 32-bit integers, and persistent bindings, while being entirely expressed through lambda calculus beta-reduction using Church encoding for numbers and Scott encoding for data structures. It operates on multiple lambda calculus interpreters including SectorLambda, John Tromp's IOCCC interpreter, and clamb/lazyk, providing an interactive REPL environment. The project demonstrates the theoretical completeness of lambda calculus by bridging practical programming language features with pure computational foundations, serving educational and research purposes in programming language theory and lambda calculus applications.