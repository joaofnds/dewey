GoDS (Go Data Structures) is a comprehensive library implementing fundamental data structures and algorithms in Go, targeting backend developers and systems programmers who need efficient, production-ready collections beyond Go's built-in types. The library provides over 15 data structures including advanced trees (Red-Black, AVL, B-Tree), heaps, bidirectional maps, priority queues, and various list implementations, all with consistent interfaces supporting iteration, enumeration, and serialization. It addresses the gap in Go's standard library for sophisticated data structures commonly needed in algorithm-intensive applications, database systems, compilers, and performance-critical software. The library features stateful iterators, JSON serialization support, and comparative analysis of time complexities, making it suitable for Go developers building complex systems requiring optimized data manipulation and storage patterns.