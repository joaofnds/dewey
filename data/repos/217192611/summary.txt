Cloture is a pre-alpha implementation of Clojure running on Common Lisp, designed for cross-language interoperability between Clojure and Common Lisp ecosystems. It enables Clojure code to be read by the Lisp reader with namespaces mapped to Lisp packages, allowing bidirectional function calls and library usage. The implementation uses FSet for persistent data structures (vectors, maps, sets), supports Clojure protocols over Java interfaces, and includes ASDF integration for loading .cljc files in Common Lisp systems. It targets Lisp developers who want to leverage Clojure libraries within Common Lisp applications, solving the problem of ecosystem fragmentation between these functional programming languages. The project aims to support Clojure's concurrency primitives and provides specialized iteration drivers for protocol-based collections.